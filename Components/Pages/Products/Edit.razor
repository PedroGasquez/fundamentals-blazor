@page "/products/edit/{id:int}"
@inject NavigationManager Navigation
@rendermode InteractiveServer


<h1>Editar produto</h1>

<EditForm Model="@Model" OnValidSubmit="OnValidSubmitAsync">
    <DataAnnotationsValidator/>
    <ValidationSummary/> 

    <div class="mb-3">
        <label class="form-label">Nome da Produto</label>
        <InputText @bind-Value="Model.Title" class="form-control"/>
        <ValidationMessage For="@(() => Model.Title)"/> 
    </div>

    <div class="mb-3">
        <label class="form-label">Preco do Produto</label>
        <InputNumber @bind-Value="Model.Price" class="form-control"/>
        <ValidationMessage For="@(() => Model.Price)"/>
    </div>

    <div class="mb-3">
        <label class="form-label">Categoria</label>
        <InputSelect @bind-Value="@Model.CategoryId" class="form-control">
            @foreach (var category in Categories)
            {
                <option value="@category.Id">
                    @category.Title
                </option>
            }
        </InputSelect>
    </div>

    <button type="submit" class="btn btn-primary">Salvar</button>
    <a href="/products" class="btn btn-danger">Cancelar</a>
</EditForm>

@code
{
    [Parameter]
    public int Id { get; set; }
    
    private Product Model { get; set; } = new();
    public IEnumerable<Category> Categories { get; set; } = Enumerable.Empty<Category>();
    
    protected override async void OnInitialized()
    {
        Model = await Context
            .Products
            .AsNoTracking()
            .FirstOrDefaultAsync(x => x.Id == Id) ?? new();
        Categories = await Context
            .Categories
            .AsNoTracking()
            .OrderBy(x => x.Title)
            .ToListAsync();
    }
    
    public async Task OnValidSubmitAsync()
    {
        Context.Products.Update(Model);
        await Context.SaveChangesAsync();
        Navigation.NavigateTo("products");
    }
}